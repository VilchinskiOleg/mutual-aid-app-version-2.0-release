# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test-and-push:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0.18-browsers
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step. Fetching your code from the GitHub.
      - checkout
      # Set up Docker
      - setup_remote_docker:
          version: 20.10.14
      # Use mvn clean and install as the standard maven build phase
      - run:
          name: Build
          command: mvn -DskipTests -P qa clean install
      # Then run your tests
      - run:
          name: Test
          command: mvn test
      # Then run build docker images and push them to dockerhub
      - run:
          name: Push images
          command: ./docker-images-preparation-script.sh
  deploy-to-aws:
    machine:
      enabled: true
    steps:
      # Checkout the code as the first step. Fetching your code from the GitHub.
      - checkout
      - run:
          name: Clean previous project version
          command: |
            ssh $SSH_USER@$SSH_HOST "sudo docker stop $(sudo docker ps -q)"
            ssh $SSH_USER@$SSH_HOST "sudo docker system prune -a -f"
            ssh $SSH_USER@$SSH_HOST "rm docker-compose.yml"
            ssh $SSH_USER@$SSH_HOST "ls"
      - run:
          name: Transfer launch file
          command: scp docker-compose.yml $SSH_USER@$SSH_HOST:/home/ubuntu/docker-compose.yml
      - run:
          name: Deploy Over SSH
          command: |
            ssh $SSH_USER@$SSH_HOST "pwd"
            
            ssh $SSH_USER@$SSH_HOST "echo '${DOCKER_PASSWORD}' | sudo docker login -u '${DOCKER_ID}' --password-stdin"
            ssh $SSH_USER@$SSH_HOST "sudo docker-compose up --build"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  # Name of the workflow:
  mutual-aid-app-deploy:
    # Inside the workflow, you define the jobs you want to run:
    jobs:
      - build-and-test-and-push:
          # Inside the job, you can define the filters like with branches you want to run flow for:
          filters:
            branches:
              only: master
      - deploy-to-aws:
          filters:
            branches:
              only: master
          # only deploy once build job has completed
          requires:
            - build-and-test-and-push